this smem stuff might be used to pass in information during boot to amss?
page 0x01f00000 is mapped with virt=phys, 1MB in size.
no pointers in this page, only offsets, since the page is
  shared and possibly mapped in other locations in other programs


smem info, pointers into smem:

+0   
+4  01f0.0000   proc comm
+8  01f0.0080   version
+c  01f0.00c0   heap info
+10 01f0.00d0   alloc tab
+14 01f0.21cf   barrier
+...

-------------------------
01f0.0000  smem
+0                           type 0, 0x40 bytes
       first 40 bytes are four commands:
       struct smem_proc_comm {
           uint32 cmd, status, data1, data2;
       } proc_comm[4];


+40                           type 3, 0x80 bytes, 0x20 records of 4bytes
      [0x20 records of 4 bytes, low halfword must be 0 or 0xa000 at init]
      int version[32];

      version[9] = 0xa003;
+c0                           type 1, 0x10 bytes
      [word must be 1 at init]
      struct smem_heap_info {
          uint32 initialized, free_offset, heap_remaining, reserved;
      } heap_info;
+d0                           type 2, 0x2000 bytes 
      [array of 16-byte entries indexed by type > 8 and < 0x89
       first word should be 1 if initialized?
           off0: init
           off4: offset from smem base
           off8: len
      ]
      struct smem_heap_entry {
          uint32 allocated, offset, size, reserved;
      } arr[512];

+20d0                         type 4, 8 bytes      SMEM_HW_RESET_DETECT
+20d8                         type 5, 4 bytes      SMEM_AARM_WARM_BOOT
+20dc                         type 6, 0xc8 bytes   SMEM_DIAG_ERR_MESSAGE
+21a4                         type 7, 0x20 bytes   SMEM_SPINLOCK_ARRAY
+21c4                         type 8, 0x4 bytes    SMEM_MEMORY_BARRIER_LOCATION
+21c8 ...end
---------------------


init in initHeapInfo 16E6458C 

type3 is an array of 0x20 ints.  the low halfword must be 0 or 0xa000


load off1 dword, should be 1.  (ie. 0x01f0.00c0)



    (fixed items)
    smemTab <0, 0x40>      SMEM_PROC_COMM
    smemTab <3, 0x80>      SMEM_VERSION_INFO
    smemTab <1, 0x10>      SMEM_HEAP_INFO
    smemTab <2, 0x2000>    SMEM_ALLOCATION_TABLE
    smemTab <4, 8>         SMEM_HW_RESET_DETECT
    smemTab <5, 4>         SMEM_AARM_WARM_BOOT
    smemTab <6, 0xC8>      SMEM_DIAG_ERR_MESSAGE          char buf[0xc8]
    smemTab <7, 0x20>      SMEM_SPINLOCK_ARRAY            uint32 locks[8]
    smemTab <8, 4>         SMEM_MEMORY_BARRIER_LOCATION   uint32?
    smemTab <0x8A, 0>

    dynamic items follow.  see smd_private.h for list
    XXX incorporate enum into amss analysis..



---------------
smem stuff is partially documented in linux code
arch/arm/mach-msm/smd*.[ch]

ie. smd.c smem_alloc, smem_item and smem_find have
direct correspondants in the amss code, though the
amss code sets up some data structs with tables that
are not needed inthe linux code...


----
At startup, AMSS expects smem to be initialized

  1) heap[0] must be initialized with smem that can be allocated
  2) there must be an smem item for SMEM_SLEEP_STATIC
     with a value at offset 0xc.

init heap[0]?
  .initialized = 1
  .free_offset = 0x21c8
  .heap_remaining = 0xfde38


--------------------

SMEM_AARM_PARTITION_TABLE  464bytes:

struct flash_partition_table {
    u32 magic1;
    u32 magic2;
    u32 version;
    u32 numparts;
    struct flash_partition_entry part_entry[16];
};

struct flash_partition_entry {
    char name[16];
    u32 offset; /* Offset in blocks from beginning of device */
    u32 length; /* Length of the partition in blocks */
    u8 attrib1;
    u8 attrib2;
    u8 attrib3;
    u8 which_flash; /* Numeric ID (first = 0, second = 1) */
};


offset = ent->offset * 64 * 2048
sz = ent->length * 64 * 2048


-----
In linux, the smd driver finds available smem channels
and connects to them.  These are:

smd_alloc_channel() 'SMD_RPCCALL' cid=2, shared=e010d9a0
smd_alloc_channel() 'SMD_DATA5' cid=11, shared=e0119a18
smd_alloc_channel() 'SMD_DATA6' cid=12, shared=e011da40
smd_alloc_channel() 'SMD_DATA7' cid=13, shared=e0121a68
smd_alloc_channel() 'SMD_DATA11' cid=17, shared=e01119c8
smd_alloc_channel() 'SMD_CS_A2M' cid=33, shared=e01159f0
smd_alloc_channel() 'SMD_DATA5_CNTL' cid=38, shared=e0125a90
smd_alloc_channel() 'SMD_DATA6_CNTL' cid=39, shared=e0129ab8
smd_alloc_channel() 'SMD_DATA7_CNTL' cid=40, shared=e012dae0
smd_alloc_channel() 'SMD_GPSNMEA' cid=27, shared=e0131b10
smd_alloc_channel() 'SMD_DS' cid=0, shared=e0135b38
smd_alloc_channel() 'SMD_DATA1' cid=7, shared=e0139b60
smd_alloc_channel() 'SMD_DATA2' cid=8, shared=e013db88
smd_alloc_channel() 'SMD_DATA3' cid=9, shared=e0141bb0
smd_alloc_channel() 'SMD_DATA4' cid=10, shared=e0145bd8

note: head of htc's kernel git repo has a full list of 58 channels.
https://www.codeaurora.org/gitweb/quic/la/?p=kernel/msm.git;a=blob_plain;f=arch/arm/mach-msm/smd_tty.c;hb=HEAD
apparently these aren't all enabled on the adp1 amss, as only
the above are provided by the amss in smem to the linux kernel.


