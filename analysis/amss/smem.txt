this smem stuff might be used to pass in information during boot to amss?
page 0x01f00000 is mapped with virt=phys, 1MB in size.

-------------------------
01f0.0000
+0                           type 0, 0x40 bytes
       [first byte set to 1 after init done]
+4     base, 01f0.0000     off for SMEM_PROC_COMM
+8     off3, 01f0.0080     off for SMEM_VERSION_INFO
+c     off1, 01f0.00c0     off for SMEM_HEAP_INFO

+10    off2, 01f0.00d0     off for SMEM_ALLOCATION_TABLE
+14    off8, 01f0.21c4     off for SMEM_MEMORY_BARRIER_LOCATION

+24    0xa003

       first 40 bytes are four commands:
       struct smem_proc_comm {
           uint32 cmd, status, data1, data2;
       } proc_comm[4];
       it looks like the first 2 are used for offsets instead?
       and the third has cmd set to 0xa003?

+40                           type 3, 0x80 bytes, 0x20 records of 4bytes
      [0x20 records of 4 bytes, low halfword must be 0 or 0xa000 at init]
      int version[32];
+c0                           type 1, 0x10 bytes
      [word must be 1 at init]
      struct smem_heap_info {
          uint32 initialized, free_offset, heap_remaining, reserved;
      } heap_info;
+d0                           type 2, 0x2000 bytes 
      [array of 16-byte entries indexed by type > 8 and < 0x89
       first word should be 1 if initialized?
           off0: init
           off4: offset from smem base
           off8: len
      ]
      struct smem_heap_entry {
          uint32 allocated, offset, size, reserved;
      } arr[512];

+20d0                         type 4, 8 bytes
+20d8                         type 5, 4 bytes
+20dc                         type 6, 0xc8 bytes
+21a4                         type 7, 0x20 bytes
+21c4                         type 8, 0x4 bytes
+21c8 ...end
---------------------


init in initHeapInfo 16E6458C 

type3 is an array of 0x20 ints.  the low halfword must be 0 or 0xa000


load off1 dword, should be 1.  (ie. 0x01f0.00c0)



    (fixed items)
    smemTab <0, 0x40>      SMEM_PROC_COMM
    smemTab <3, 0x80>      SMEM_VERSION_INFO
    smemTab <1, 0x10>      SMEM_HEAP_INFO
    smemTab <2, 0x2000>    SMEM_ALLOCATION_TABLE
    smemTab <4, 8>         SMEM_HW_RESET_DETECT
    smemTab <5, 4>         SMEM_AARM_WARM_BOOT
    smemTab <6, 0xC8>      SMEM_DIAG_ERR_MESSAGE          char buf[0xc8]
    smemTab <7, 0x20>      SMEM_SPINLOCK_ARRAY            uint32 locks[8]
    smemTab <8, 4>         SMEM_MEMORY_BARRIER_LOCATION   uint32?
    smemTab <0x8A, 0>

    dynamic items follow.  see smd_private.h for list
    XXX incorporate enum into amss analysis..



---------------
smem stuff is partially documented in linux code
arch/arm/mach-msm/smd*.[ch]

ie. smd.c smem_alloc, smem_item and smem_find have
direct correspondants in the amss code, though the
amss code sets up some data structs with tables that
are not needed inthe linux code...

