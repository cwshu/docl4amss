The kernel has some non-standard extensions.
--------------

utcb platform_reserved[0] is used - XXX this is the preemption flag!
syscall 6 is used, but with 0xffffffe0 as sp, not 0xffffff06
  as user_ macro would use

utcb __served0 field (offset 10) is used in amss code and quartz

UND     #0xFA55 <- illegal opcode used in amss code.
   where does this fault lead to?

kip->0x10c used by amss func 0xB42480 (see "kip10c")
kip->0x108 used by amss (see "kip108")


sys_arm_misc handler switches 65 cases instead of 41
  but the same cases except for 0xe0.

a0 - kputc
a4 - kgetc
a8 - kgetc nb
ac - kdebug
(b0 - unimpl, getutcb)
b4 - kip
b8 - kset thread name
bc - getcounter
c0 - getnumtps
c4 - get tpname
c8 - tc ctrl
  
e0 - special!  (not get tick!)


custom e0 call is called in several ways:
default cases return 1.
case 22 is used by quartz server.
case 8 is used by amss server @0xB424C4   syscall(0,8,1,0)
   syscall(0,1,0,0)
   syscall(0,1,1,0)
   syscall(0,4,x,0)
   syscall(0,8,0,0)
   syscall(0,8,1,0)
   syscall(0,10,x,0)
   syscall(0,22,x,y)  (during iguana_thread_delete)
   syscall(0,23,x,..)
   syscall(0,26,x,y)



---
the dispatch for standard syscalls (./arch/arm/v5/src/traps.spp)
is just "ldr pc, [pc,r12]"  where r12 has been bounds checked.
What happens if r12 is misaligned?  can we force it to jump
to our own code in supervisor mode?  or will this just fault?

   if so, maybe by prepping the addr space we can get
   the kernel to jump right to our code in supervisor mode?

---------------
the kernel has kdb and lots of tracing built in.
these can be used to get lots of info on internal data structures
and the code.

    XXX review kip/utcb/etc. dumping functions to see if they
    talk about extension fields

------

the undefined instruction handler has two "backdoor" functions:

   if r12 == 0xfffffff6 : /* -10 */
      clear bit 0x80 of SPSR
      return with r0 = SPSR with 0x80 set
   if r12 == 0xffffff1c : /* -0xe4 */
      set or clear it 0x40 of SPSR (ie. IRQ) based on r0 bit 0
      return with r0 = old SPSR

and there's a special mode set up by the misc syscall call with r1=40
that causes the undefined instruction handler to process three
special cache instructions:

   0xEE070F15 - inv i-cache
   0xee070f9a - drain write buffer
   0xEE17FF7A - test and clean d-cache

---
normal undefined exception handler doesnt run with irq/fiq disabled
as is done in pub srcs.



-----------
XXX figure this out more...

dword_F001F570 is a flag that sets a mode.
if set, during return to userland, 
pulls a value from utcb->user_reserved[0] (or 0x100 if not set)
and stores it at (short*)0xF9504282 if its not already set to the value

settable by misc call e0, r1==9

also if set, then misc call e0, r1 == 5 will
store r2 into (short*)0xF9504282



----------------

tcbs are stored at 0xe000.0000 in a table indexed by
certain bits in the tid.  see check_other_tcb for an
example of constructing an addr from a tid.

---------
0xff00.0000 stores user kip page
0xff00.0ff0 refers to utcb

----
sys_processor_control is implemented.  its a nop in std code

----
utcb.byte[10] is normally reserved, but is used by
arm_irq_exception.  If flag 0x2 is set, the irq is ignored.

