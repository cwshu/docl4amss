The syscall for SP=0xffffffe0 is vectored through sys_arm_misc.
Its a non-standard call (and does not correspond to the
"get tick" call that is conditionally compiled into the
standard okl4 tree!).  It is a catch-all for extension syscalls
used by the custom okl4 kernel for the surf platform.

The handler is at F000E43C and takes an arm_irq_context_t arg
(which has the captured userland registers).  It switches
on the value of context->r1 for the following cases:

       cases: 1, 3,4,5,6,7,8,9,10,
       21, 22, 23, 24, 25, 26, 27, 28, 29, 30
       34, 36, 40

Here are descriptions for some of these handlers 
written as calle0(r0, r1, r2, ...):

calle0(0,1,x) :
    irq control
    enable/disable IRQ based on x (0 or 1, others == nop)
    return (cpsr >> 7) | 1;   (ie. all but the control bits)

calle0(0, 4, x[]) :
    cache control
    switch(x[0])
       1: clean all dcache, drain write buffer
       2: test/clean/invalidate all d-cache
       3: invalidate i-cache
       4: same as case 2
       5: clean/invalidate range of d-cache from x[1]..x[1]+x[2]
       6: enable or disable caching based on x[1]
       7: enable or disable d-cache based on x[1]
       8: enable or disable i-cache on x[1]
       9: invalidate range of i- and d-cache on x[1],x[2]
      10: test/clean all d-cache
      11: drain write buffer
      12: clean single d-cache line x[1]
      13: clean range of d-cache x[1],x[2]
      14: same as case 3
      15: invalidate range of d-cache x[1],x[2]
      16: wait for an interrupt


calle0(0,8,x) :
    thread tracing control.
    enable or disable thread tracing.
    set the value of traceFlags and return its old value
    if traceFlag is 0 then no thread tracing happens
    if traceFlags is 2 then thread tracing stores the full thread debug_name
       otherwise it just stores the first four bytes.

calle0(0,10,)
    TLB lockdown control
    add 0xf94ef800 to tlb lockdown
    if r2[0] then add r2[1] to tlb lockdown too
    (keeping standard locked tlb entries in place)

calle0(0,22, tid, int *x)
    given tid and x, both nonzero
    return the first thread local store item from thread tid in x[0].
    XXX writes to arbitrary address from kernel domain!

calle0(0,24, x[]) 
    if x[0] == 1 :
        enable or disable alignment check for x[1]==1 or 0.
    if x[0] == 2 :
        set or clear some user settable variable for x[1] !=0 or == 0

calle0(0, 40)
    set someFlag in kernel that enables some handlers in
    undefined instruction handler.
    Once enabled it cannot be disabled...
    XXX investigate more.

